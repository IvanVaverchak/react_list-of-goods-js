{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPH","SORT_FIELD_LNGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","listOfGoods","goods","prepareGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedList","className","onClick","type","classNames","JSON","stringify","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,sBAClBC,EAAmB,iBA2BlB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAAyBC,EAAzB,GAA4D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACvCI,EAAY,YAAOD,GAqBvB,OAnBIL,GACFM,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,IACFI,EAAeA,EAAaM,WAGvBN,EAOHO,CAAgBlB,EAAiB,CAAEK,YAAWE,eAElD,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMd,EAAaL,IAC5BoB,KAAK,SACLF,UACEG,IAAW,iBACT,CAAE,WAAYjB,IAAcJ,IALlC,iCAUA,wBACEmB,QAAS,kBAAMd,EAAaJ,IAC5BmB,KAAK,SACLF,UACEG,IAAW,iBACT,CAAE,WAAYjB,IAAcH,IALlC,4BAUA,wBACEkB,QAAS,kBAEHZ,GADJD,IAIFc,KAAK,SACLF,UACEG,IAAW,iBACT,CAAE,YAAaf,IATrB,qBAcCgB,KAAKC,UAAUxB,KAAqBuB,KAAKC,UAAUf,IAClD,wBACEW,QAAS,WACPZ,GAAc,GACdF,EAAa,KAEfe,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGV,EAAYgB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCtGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ab8e6cd1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPH = 'Sort alphabetically';\nconst SORT_FIELD_LNGTH = 'Sort by length';\n\nfunction getPreparedList(goods, { sortField, isReversed }) {\n  let prepareGoods = [...goods];\n\n  if (sortField) {\n    prepareGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPH:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LNGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const listOfGoods\n    = getPreparedList(goodsFromServer, { sortField, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_ALPH)}\n          type=\"button\"\n          className={\n            classNames('button is-info',\n              { 'is-light': sortField !== SORT_FIELD_ALPH })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_FIELD_LNGTH)}\n          type=\"button\"\n          className={\n            classNames('button is-info',\n              { 'is-light': sortField !== SORT_FIELD_LNGTH })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => (\n            isReversed\n              ? setIsReversed(false)\n              : setIsReversed(true)\n          )}\n          type=\"button\"\n          className={\n            classNames('button is-info',\n              { 'is-light': !isReversed })}\n        >\n          Reverse\n        </button>\n\n        {JSON.stringify(goodsFromServer) !== JSON.stringify(listOfGoods) && (\n          <button\n            onClick={() => {\n              setIsReversed(false);\n              setSortField('');\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {listOfGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}